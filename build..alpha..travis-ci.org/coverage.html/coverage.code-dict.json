{"/home/travis/build/npmtest/node-npmtest-gulp-jsdoc3/test.js":"/* istanbul instrument in package npmtest_gulp_jsdoc3 */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-jsdoc3/lib.npmtest_gulp_jsdoc3.js":"/* istanbul instrument in package npmtest_gulp_jsdoc3 */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_gulp_jsdoc3 = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_gulp_jsdoc3 = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-jsdoc3/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-gulp-jsdoc3 && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_gulp_jsdoc3 */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_gulp_jsdoc3\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_gulp_jsdoc3.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_gulp_jsdoc3.rollup.js'] =\n            local.assetsDict['/assets.npmtest_gulp_jsdoc3.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_gulp_jsdoc3.__dirname + '/lib.npmtest_gulp_jsdoc3.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-jsdoc3/node_modules/gulp-jsdoc3/index.js":"/**\n * Created by udoff on 12/10/15.\n */\nmodule.exports = require('./dist/gulp-jsdoc').jsdoc;\n","/home/travis/build/npmtest/node-npmtest-gulp-jsdoc3/node_modules/gulp-jsdoc3/dist/gulp-jsdoc.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nexports.jsdoc = jsdoc;\n\nvar _mapStream = require('map-stream');\n\nvar _mapStream2 = _interopRequireDefault(_mapStream);\n\nvar _tmp = require('tmp');\n\nvar _tmp2 = _interopRequireDefault(_tmp);\n\nvar _fs = require('fs');\n\nvar _fs2 = _interopRequireDefault(_fs);\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nvar _gulpUtil = require('gulp-util');\n\nvar _gulpUtil2 = _interopRequireDefault(_gulpUtil);\n\nvar _bluebird = require('bluebird');\n\nvar _bluebird2 = _interopRequireDefault(_bluebird);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar os = require('os').type();\n\nvar debug = require('debug')('gulp-jsdoc3');\n\n/**\n * @callback gulpDoneCallback\n */\n\n/**\n * A wrapper around jsdoc cli.\n *\n * This function collects all filenames. Then runs:\n * ```jsdoc -c config -t node_modules/ink-docstrap/template gulpFile1 gulpFile2```\n * @example\n * gulp.src(['README.md', 'src/*.js']), {read: false}).pipe(\n *     jsdoc(options, cb)\n * );\n *\n * @param {Object} [config=require('./jsdocConfig.json')]\n * @param {gulpDoneCallback} done\n * @returns {*|SignalBinding}\n */\nfunction jsdoc(config, done) {\n    var files = [];\n    var jsdocConfig = void 0;\n\n    // User just passed callback\n    if (arguments.length === 1 && typeof config === 'function') {\n        done = config;\n        config = undefined;\n    }\n\n    // Prevent some errors\n    if (typeof done !== 'function') {\n        done = function done() {};\n    }\n\n    jsdocConfig = config || require('./jsdocConfig.json');\n\n    debug('Config:\\n' + JSON.stringify(jsdocConfig, undefined, 2));\n\n    return (0, _mapStream2.default)(function (file, callback) {\n        files.push(file.path);\n        callback(null, file);\n    }).on('end', function () {\n        // We use a promise to prevent multiple dones (normal cause error then close)\n        new _bluebird2.default(function (resolve, reject) {\n            // We clone the config file so as to not affect the original\n            var jsdocConfigClone = JSON.parse(JSON.stringify(jsdocConfig));\n            // If the user has specified a source.include key, we append the\n            // gulp.src files to it.\n            if (jsdocConfigClone.source && jsdocConfigClone.source.include) {\n                jsdocConfigClone.source.include = jsdocConfigClone.source.include.concat(files);\n            } else {\n                jsdocConfigClone = _extends(jsdocConfigClone, { source: { include: files } });\n            }\n\n            if (jsdocConfigClone.source.include.length === 0) {\n                var errMsg = 'JSDoc Error: no files found to process';\n                _gulpUtil2.default.log(_gulpUtil2.default.colors.red(errMsg));\n                _gulpUtil2.default.beep();\n                reject(new Error(errMsg));\n                return;\n            }\n\n            var tmpobj = _tmp2.default.fileSync();\n            debug('Documenting files: ' + jsdocConfigClone.source.include.join(' '));\n            _fs2.default.writeFile(tmpobj.name, JSON.stringify(jsdocConfigClone), 'utf8', function (err) {\n                // We couldn't write the temp file\n                /* istanbul ignore next */\n                if (err) {\n                    reject(err);\n                    return;\n                }\n\n                var spawn = require('child_process').spawn,\n                    cmd = require.resolve('jsdoc/jsdoc.js'),\n                    // Needed to handle npm3 - find the binary anywhere\n                inkdocstrap = _path2.default.dirname(require.resolve('ink-docstrap'));\n\n                var args = ['-c', tmpobj.name];\n\n                // Config + ink-docstrap if user did not specify their own layout or template\n                if (!(jsdocConfigClone.opts && jsdocConfigClone.opts.template) && !(jsdocConfigClone.templates && jsdocConfigClone.templates.default && jsdocConfigClone.templates.default.layoutFile)) {\n                    args = args.concat(['-t', inkdocstrap]);\n                }\n\n                debug(cmd + ' ' + args.join(' '));\n\n                var child = os === 'Windows_NT' ? spawn(process.execPath, [cmd].concat(args), { cwd: process.cwd() }) : spawn(cmd, args, { cwd: process.cwd() }); // unix\n                child.stdout.setEncoding('utf8');\n                child.stderr.setEncoding('utf8');\n                /* istanbul ignore next */\n                child.stdout.on('data', function (data) {\n                    _gulpUtil2.default.log(data);\n                });\n                /* istanbul ignore next */\n                child.stderr.on('data', function (data) {\n                    _gulpUtil2.default.log(_gulpUtil2.default.colors.red(data));\n                    _gulpUtil2.default.beep();\n                });\n                child.on('close', function (code) {\n                    if (code === 0) {\n                        _gulpUtil2.default.log('Documented ' + jsdocConfigClone.source.include.length + ' files!');\n                        resolve();\n                    } else {\n                        _gulpUtil2.default.log(_gulpUtil2.default.colors.red('JSDoc returned with error code: ' + code));\n                        _gulpUtil2.default.beep();\n                        reject(new Error('JSDoc closed with error code: ' + code));\n                    }\n                });\n                child.on('error', function (error) {\n                    _gulpUtil2.default.log(_gulpUtil2.default.colors.red('JSDoc Error: ' + error));\n                    _gulpUtil2.default.beep();\n                    reject(new Error(error));\n                });\n            });\n        }).asCallback(done);\n    });\n}\n//# sourceMappingURL=gulp-jsdoc.js.map\n","/home/travis/build/npmtest/node-npmtest-gulp-jsdoc3/node_modules/gulp-jsdoc3/src/gulp-jsdoc.js":"import map from 'map-stream';\nimport tmp from 'tmp';\nimport fs from 'fs';\nimport path from 'path';\nimport gutil from 'gulp-util';\nimport Promise from 'bluebird';\nlet os = require('os').type();\n\nlet debug = require('debug')('gulp-jsdoc3');\n\n/**\n * @callback gulpDoneCallback\n */\n\n/**\n * A wrapper around jsdoc cli.\n *\n * This function collects all filenames. Then runs:\n * ```jsdoc -c config -t node_modules/ink-docstrap/template gulpFile1 gulpFile2```\n * @example\n * gulp.src(['README.md', 'src/*.js']), {read: false}).pipe(\n *     jsdoc(options, cb)\n * );\n *\n * @param {Object} [config=require('./jsdocConfig.json')]\n * @param {gulpDoneCallback} done\n * @returns {*|SignalBinding}\n */\nexport function jsdoc(config, done) {\n    let files = [];\n    let jsdocConfig;\n\n    // User just passed callback\n    if (arguments.length === 1 && typeof config === 'function') {\n        done = config;\n        config = undefined;\n    }\n\n    // Prevent some errors\n    if (typeof done !== 'function') {\n        done = function () {\n        };\n    }\n\n    jsdocConfig = config || require('./jsdocConfig.json');\n\n    debug('Config:\\n' + JSON.stringify(jsdocConfig, undefined, 2));\n\n    return map(function (file, callback) {\n        files.push(file.path);\n        callback(null, file);\n    }).on('end', function () {\n        // We use a promise to prevent multiple dones (normal cause error then close)\n        new Promise(function (resolve, reject) {\n            // We clone the config file so as to not affect the original\n            let jsdocConfigClone = JSON.parse(JSON.stringify(jsdocConfig));\n            // If the user has specified a source.include key, we append the\n            // gulp.src files to it.\n            if (jsdocConfigClone.source && jsdocConfigClone.source.include) {\n                jsdocConfigClone.source.include =\n                    jsdocConfigClone.source.include.concat(files);\n            } else {\n                jsdocConfigClone = Object.assign(jsdocConfigClone,\n                    { source: { include: files } });\n            }\n\n            if (jsdocConfigClone.source.include.length === 0) {\n                const errMsg = 'JSDoc Error: no files found to process';\n                gutil.log(gutil.colors.red(errMsg));\n                gutil.beep();\n                reject(new Error(errMsg));\n                return;\n            }\n\n            const tmpobj = tmp.fileSync();\n            debug('Documenting files: ' + jsdocConfigClone.source.include.join(' '));\n            fs.writeFile(tmpobj.name, JSON.stringify(jsdocConfigClone), 'utf8', function (err) {\n                // We couldn't write the temp file\n                /* istanbul ignore next */\n                if (err) {\n                    reject(err);\n                    return;\n                }\n\n                const spawn = require('child_process').spawn,\n                    cmd = require.resolve('jsdoc/jsdoc.js'), // Needed to handle npm3 - find the binary anywhere\n                    inkdocstrap = path.dirname(require.resolve('ink-docstrap'));\n\n                let args = ['-c', tmpobj.name];\n\n                // Config + ink-docstrap if user did not specify their own layout or template\n                if (!(jsdocConfigClone.opts &&\n                    jsdocConfigClone.opts.template) && !(jsdocConfigClone.templates &&\n                    jsdocConfigClone.templates.default &&\n                    jsdocConfigClone.templates.default.layoutFile)) {\n                    args = args.concat(['-t', inkdocstrap]);\n                }\n\n                debug(cmd + ' ' + args.join(' '));\n\n                const child = os === 'Windows_NT'\n                    ? spawn(process.execPath, [cmd].concat(args), {cwd: process.cwd()})\n                    : spawn(cmd, args, {cwd: process.cwd()}); // unix\n                child.stdout.setEncoding('utf8');\n                child.stderr.setEncoding('utf8');\n                /* istanbul ignore next */\n                child.stdout.on('data', function (data) {\n                    gutil.log(data);\n                });\n                /* istanbul ignore next */\n                child.stderr.on('data', function (data) {\n                    gutil.log(gutil.colors.red(data));\n                    gutil.beep();\n                });\n                child.on('close', function (code) {\n                    if (code === 0) {\n                        gutil.log('Documented ' + jsdocConfigClone.source.include.length + ' files!');\n                        resolve();\n                    } else {\n                        gutil.log(gutil.colors.red('JSDoc returned with error code: ' + code));\n                        gutil.beep();\n                        reject(new Error('JSDoc closed with error code: ' + code));\n                    }\n                });\n                child.on('error', function (error) {\n                    gutil.log(gutil.colors.red('JSDoc Error: ' + error));\n                    gutil.beep();\n                    reject(new Error(error));\n                });\n            });\n        }).asCallback(done);\n    });\n}\n"}